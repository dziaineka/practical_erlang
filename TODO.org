- 14-я тема -- создать проект по описанию в lesson_14.md
  там все должно закончится на запуске двух воркеров с разными аргументами и разным стейтом

- добавить темы 17 и 18 в README


* курсовой проект

- strategy proj
  + player gen_server
  + start player under sup from st_tcp_api
  + player sessions storage
  - keep {socker, player_srv} in storage
    почему st_player_storage:add_player нужно вызывать в st_player_srv:init?
  - storage мониторит player_srv и удаляет из storage при завершении процесса
  - auth
  - close player session
  - get players list

- battle
  - начало уже есть, ff_game, нужно перенести в проекту
  - убрать zippers, заменить на map
  - реализовать взаимодействие с клиентом по текстовому протоколу через telnet

- match maker


* 08. concurrency

картинка-схема, как работает почтовый ящик
(нарисую на доске, сфоткаю, нарисую нормально)

добавить про exit(Pid, shutdown)

Подготовить к практике MapReduce. Схема как можно наладить общение между потоками.
Должна быть в README.


* 09. gen_server_1
- схема из 4х квадратов, как в gen_server_2 только для нашей кастомной реализации


* 10. gen_server_2
схема deadlock
прямой и через цепочку вызовов


* 12. supervisor
simple_one_for_one, можно ли остановить/удалить child?

убрать старые версии init, оставить только новые, на мапах


* 13. Application
- показывать observer. На примере solution или на каком-нибудь другом примере.


* 14. OTP
- структуру проекта на примере rebar3 а не rebar2
- показать wgnet либы
- cowboy, cowlib, ranch -- пример OTP приложений
- схема -- проблема с транзитивными либами


* 15. обработка ошибок
- рассказать про pipeline
- показать, как это выглядит на OCaml (Haskell)
https://github.com/yzh44yzh/erl_fun_composition
